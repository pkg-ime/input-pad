# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_input_pad', [dirname(__file__)])
        except ImportError:
            import _input_pad
            return _input_pad
        if fp is not None:
            try:
                _mod = imp.load_module('_input_pad', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _input_pad = swig_import_helper()
    del swig_import_helper
else:
    import _input_pad
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


INPUT_PAD_WINDOW_TYPE_GTK = _input_pad.INPUT_PAD_WINDOW_TYPE_GTK
INPUT_PAD_WINDOW_SHOW_TABLE_TYPE_NOTHING = _input_pad.INPUT_PAD_WINDOW_SHOW_TABLE_TYPE_NOTHING
INPUT_PAD_WINDOW_SHOW_TABLE_TYPE_CUSTOM = _input_pad.INPUT_PAD_WINDOW_SHOW_TABLE_TYPE_CUSTOM
INPUT_PAD_WINDOW_SHOW_TABLE_TYPE_ALL = _input_pad.INPUT_PAD_WINDOW_SHOW_TABLE_TYPE_ALL
INPUT_PAD_WINDOW_SHOW_LAYOUT_TYPE_NOTHING = _input_pad.INPUT_PAD_WINDOW_SHOW_LAYOUT_TYPE_NOTHING
INPUT_PAD_WINDOW_SHOW_LAYOUT_TYPE_DEFAULT = _input_pad.INPUT_PAD_WINDOW_SHOW_LAYOUT_TYPE_DEFAULT
class _InputPadWindowKbduiName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _InputPadWindowKbduiName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _InputPadWindowKbduiName, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _input_pad._InputPadWindowKbduiName_name_set
    __swig_getmethods__["name"] = _input_pad._InputPadWindowKbduiName_name_get
    if _newclass:name = _swig_property(_input_pad._InputPadWindowKbduiName_name_get, _input_pad._InputPadWindowKbduiName_name_set)
    __swig_setmethods__["description"] = _input_pad._InputPadWindowKbduiName_description_set
    __swig_getmethods__["description"] = _input_pad._InputPadWindowKbduiName_description_get
    if _newclass:description = _swig_property(_input_pad._InputPadWindowKbduiName_description_get, _input_pad._InputPadWindowKbduiName_description_set)
    __swig_setmethods__["type"] = _input_pad._InputPadWindowKbduiName_type_set
    __swig_getmethods__["type"] = _input_pad._InputPadWindowKbduiName_type_get
    if _newclass:type = _swig_property(_input_pad._InputPadWindowKbduiName_type_get, _input_pad._InputPadWindowKbduiName_type_set)
    def __init__(self): 
        this = _input_pad.new__InputPadWindowKbduiName()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _input_pad.delete__InputPadWindowKbduiName
    __del__ = lambda self : None;
_InputPadWindowKbduiName_swigregister = _input_pad._InputPadWindowKbduiName_swigregister
_InputPadWindowKbduiName_swigregister(_InputPadWindowKbduiName)


def input_pad_get_version():
  return _input_pad.input_pad_get_version()
input_pad_get_version = _input_pad.input_pad_get_version

def input_pad_window_init(*args):
  return _input_pad.input_pad_window_init(*args)
input_pad_window_init = _input_pad.input_pad_window_init

def input_pad_window_new(*args):
  return _input_pad.input_pad_window_new(*args)
input_pad_window_new = _input_pad.input_pad_window_new

def input_pad_window_show(*args):
  return _input_pad.input_pad_window_show(*args)
input_pad_window_show = _input_pad.input_pad_window_show

def input_pad_window_hide(*args):
  return _input_pad.input_pad_window_hide(*args)
input_pad_window_hide = _input_pad.input_pad_window_hide

def input_pad_window_get_visible(*args):
  return _input_pad.input_pad_window_get_visible(*args)
input_pad_window_get_visible = _input_pad.input_pad_window_get_visible

def input_pad_window_set_paddir(*args):
  return _input_pad.input_pad_window_set_paddir(*args)
input_pad_window_set_paddir = _input_pad.input_pad_window_set_paddir

def input_pad_window_append_padfile(*args):
  return _input_pad.input_pad_window_append_padfile(*args)
input_pad_window_append_padfile = _input_pad.input_pad_window_append_padfile

def input_pad_window_set_char_button_sensitive(*args):
  return _input_pad.input_pad_window_set_char_button_sensitive(*args)
input_pad_window_set_char_button_sensitive = _input_pad.input_pad_window_set_char_button_sensitive

def input_pad_window_reorder_button_pressed(*args):
  return _input_pad.input_pad_window_reorder_button_pressed(*args)
input_pad_window_reorder_button_pressed = _input_pad.input_pad_window_reorder_button_pressed

def input_pad_window_get_kbdui_name_list():
  return _input_pad.input_pad_window_get_kbdui_name_list()
input_pad_window_get_kbdui_name_list = _input_pad.input_pad_window_get_kbdui_name_list

def input_pad_window_set_kbdui_name(*args):
  return _input_pad.input_pad_window_set_kbdui_name(*args)
input_pad_window_set_kbdui_name = _input_pad.input_pad_window_set_kbdui_name

def input_pad_window_set_show_table(*args):
  return _input_pad.input_pad_window_set_show_table(*args)
input_pad_window_set_show_table = _input_pad.input_pad_window_set_show_table

def input_pad_window_set_show_layout(*args):
  return _input_pad.input_pad_window_set_show_layout(*args)
input_pad_window_set_show_layout = _input_pad.input_pad_window_set_show_layout

def input_pad_window_main(*args):
  return _input_pad.input_pad_window_main(*args)
input_pad_window_main = _input_pad.input_pad_window_main

def input_pad_window_destroy(*args):
  return _input_pad.input_pad_window_destroy(*args)
input_pad_window_destroy = _input_pad.input_pad_window_destroy
get_version = input_pad_get_version

class InputPadWindow:
    def __init__(self, argv=None, type=INPUT_PAD_WINDOW_TYPE_GTK):
        self.window = None
        self.type = type

        _init_internal(argv, type)
    def new (self, child=0):
        self.window = _input_pad_window_new_with_gtype (child, True)
    def show(self):
        input_pad_window_show(self.window)
    def hide(self):
        input_pad_window_hide(self.window)
    def get_visible(self):
        return input_pad_window_get_visible(self.window)
    def set_paddir(self, paddir, domain=None):
        input_pad_window_set_paddir(self.window, paddir, domain)
    def append_padfile(self, padfile, domain=None):
        input_pad_window_append_padfile(self.window, padfile, domain)
    def set_char_button_sensitive(self, sensitive):
        input_pad_window_set_char_button_sensitive(self.window, sensitive)
    def reorder_button_pressed(self):
        input_pad_window_reorder_button_pressed(self.window)
    def set_kbdui_name(self, name=None):
        input_pad_window_set_kbdui_name(self.window, name)
    def set_show_table (self, type=0):
        input_pad_window_set_show_table (self.window, type)
    def set_show_layout (self, type=0):
        input_pad_window_set_show_layout (self.window, type)
    def connect(self, signal_id, signal_cb, data=None):
        _input_pad_window_connect_wrapper(self.window, signal_id, signal_cb,
                                          data)
    def main(self):
        input_pad_window_main(self.window)
    def destroy(self):
        input_pad_window_destroy(self.window)

def _init_internal(argv, type):
        if argv == None:
            import sys
            argv = sys.argv
        if type == INPUT_PAD_WINDOW_TYPE_GTK:
            import pygtk
            import gtk

        _input_pad_window_init_wrapper (argv, type)

def init(argv=None, type=INPUT_PAD_WINDOW_TYPE_GTK):
    _init_internal(argv, type)
def get_kbdui_name_list():
    return _input_pad_window_get_kbdui_name_list_wrapper()


def _input_pad_window_new_with_gtype(*args):
  return _input_pad._input_pad_window_new_with_gtype(*args)
_input_pad_window_new_with_gtype = _input_pad._input_pad_window_new_with_gtype

def _input_pad_window_get_kbdui_name_list_wrapper():
  return _input_pad._input_pad_window_get_kbdui_name_list_wrapper()
_input_pad_window_get_kbdui_name_list_wrapper = _input_pad._input_pad_window_get_kbdui_name_list_wrapper

def _input_pad_window_init_wrapper(*args):
  return _input_pad._input_pad_window_init_wrapper(*args)
_input_pad_window_init_wrapper = _input_pad._input_pad_window_init_wrapper
class python_callback_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, python_callback_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, python_callback_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pysignal_cb"] = _input_pad.python_callback_data_pysignal_cb_set
    __swig_getmethods__["pysignal_cb"] = _input_pad.python_callback_data_pysignal_cb_get
    if _newclass:pysignal_cb = _swig_property(_input_pad.python_callback_data_pysignal_cb_get, _input_pad.python_callback_data_pysignal_cb_set)
    __swig_setmethods__["pydata"] = _input_pad.python_callback_data_pydata_set
    __swig_getmethods__["pydata"] = _input_pad.python_callback_data_pydata_get
    if _newclass:pydata = _swig_property(_input_pad.python_callback_data_pydata_get, _input_pad.python_callback_data_pydata_set)
    def __init__(self): 
        this = _input_pad.new_python_callback_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _input_pad.delete_python_callback_data
    __del__ = lambda self : None;
python_callback_data_swigregister = _input_pad.python_callback_data_swigregister
python_callback_data_swigregister(python_callback_data)


def button_pressed_cb(*args):
  return _input_pad.button_pressed_cb(*args)
button_pressed_cb = _input_pad.button_pressed_cb

def _input_pad_window_connect_wrapper(*args):
  return _input_pad._input_pad_window_connect_wrapper(*args)
_input_pad_window_connect_wrapper = _input_pad._input_pad_window_connect_wrapper


